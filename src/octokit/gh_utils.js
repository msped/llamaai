import createIssueComment from "./utils/create-issue-comment";

// Function to fetch issue details
export const fetchIssueDetails = async (octokit, owner, repo, issue_number) => {
    const { data } = await octokit.request("GET /repos/{owner}/{repo}/issues/{issue_number}", {
        owner,
        repo,
        issue_number,
    });
    return data;
}

  // Function to create a branch
export const createBranch = async (octokit, owner, repo, base, newBranchName) => {
    let refData;

    try {
        const response = await octokit.request("GET /repos/{owner}/{repo}/git/ref/{ref}", {
            owner,
            repo,
            ref: `heads/${base}`,
        })
        return response.data;
    } catch (error) {
        console.error('Failed to fetch ref:', error);
    }
    try {
        await octokit.request("POST /repos/{owner}/{repo}/git/refs", {
            owner,
            repo,
            ref: `refs/heads/${newBranchName}`,
            sha: refData.object.sha,
        });
    } catch (error) {
        console.error('Failed to create branch:', error);
    }
}

  // Function to create files and commit
export const createFilesAndCommit = async (octokit, owner, repo, branch, pathsContentsMap) => {
    for (const [path, content] of Object.entries(pathsContentsMap)) {
        await octokit.request("PUT /repos/{owner}/{repo}/contents/{path}", {
            owner,
            repo,
            path,
            message: `Update ${path}`,
            content: Buffer.from(content).toString('base64'),
            branch,
        });
    }
}

  // Function to create a pull request
export const createPullRequest = async (octokit, owner, repo, title, head, base, body) => {
    const { data } = await octokit.request("POST /repos/{owner}/{repo}/pulls", {
        owner,
        repo,
        title,
        head,
        base,
        body,
    });
    return data;
}

export const processAssignedIssue = async (octokit, payload) => {
    const { issue, repository } = payload;
    const owner = repository.owner.login;
    const repo = repository.name;
    const issueNumber = issue.number;
    const issueLabels = issue.labels.map(label => label.name).join('-');

    createIssueComment(
        octokit,
        owner,
        repo,
        issueNumber,
        "We have received your request and will look to provide a solution. \n\n" +
        "Your request has been placed into a queue. Once completed, we will send " +
        "you a pull request to review."
    )

    try {
        // Analyze repository structure
        const dirStructure = await fetchRepositoryStructure(octokit, owner, repo);
    
        // Get AI-generated code (simulated here)
        const { filePath, content } = await generateCodeWithAI(issue.title, dirStructure);
    
        // Handle git operations
        const branchName = `llama-${issueLabels}-${issueNumber}`;
        await createBranch(octokit, owner, repo, 'main', branchName);
        await createFilesAndCommit(octokit, owner, repo, branchName, { [filePath]: content });
        await createPullRequest(
            octokit,
            owner, 
            repo, 
            `Fix for issue #${issueNumber}`, 
            branchName, 
            'main', 
            'Code generated by LlamaAI. This code has not been reviewed, ' +
            'please review and test it before merging.'
        );
        
        // Should update db to show as completed
        console.log('Pull request created successfully.');
    } catch (error) {
        // Should send an email or save to db maybe?
        console.error('Failed to process issue:', error);
    }
}

export const fetchRepositoryStructure = async (octokit, owner, repo) => {
    const { data: contents } = await octokit.request("GET /repos/{owner}/{repo}/contents/{path}", {
        owner,
        repo,
        path: '', // root directory
    });
    return contents.filter(item => item.type === 'dir').map(dir => dir.path);
}

export const generateCodeWithAI = async(issueTitle, issueBody, dirStructure) => {

    return { filePath, content };
}

export const requestIssueMessage = async (octokit, payload) => {
    const { repository, issue } = payload;
    const owner = repository.owner.login;
    const repo = repository.name;
    const issueNumber = issue.number;

    await createIssueComment(
        octokit,
        owner,
        repo,
        issueNumber,
        "Would you like LlamaAI to provide a solution to this issue? \n\n" +
        "Please comment with: \n\n" +
        "1. Yes - LlamaAI will generate a solution and create a pull request.\n" +
        "2. No - LlamaAI will not provide any solution. \n\n" +
        "> [!IMPORTANT]\n" +
        "> Only the repository owner can request LlamaAI to provide a solution." 
    )
}